/**
 * This class file was automatically generated by jASN1 v1.7.2-SNAPSHOT (http://www.openmuc.org)
 */

package org.openmuc.josistack.internal.presentation.asn1;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jasn1.ber.BerLength;
import org.openmuc.jasn1.ber.BerTag;
import org.openmuc.jasn1.ber.types.BerInteger;
import org.openmuc.jasn1.ber.types.BerObjectIdentifier;

public class ContextList {

    public static class SEQUENCE {

        public static class TransferSyntaxNameList {

            public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
            public byte[] code = null;
            private List<TransferSyntaxName> seqOf = null;

            public TransferSyntaxNameList() {
                seqOf = new ArrayList<>();
            }

            public TransferSyntaxNameList(byte[] code) {
                this.code = code;
            }

            public List<TransferSyntaxName> getTransferSyntaxName() {
                if (seqOf == null) {
                    seqOf = new ArrayList<>();
                }
                return seqOf;
            }

            public int encode(BerByteArrayOutputStream os) throws IOException {
                return encode(os, true);
            }

            public int encode(BerByteArrayOutputStream os, boolean withTag) throws IOException {

                if (code != null) {
                    for (int i = code.length - 1; i >= 0; i--) {
                        os.write(code[i]);
                    }
                    if (withTag) {
                        return tag.encode(os) + code.length;
                    }
                    return code.length;
                }

                int codeLength = 0;
                for (int i = (seqOf.size() - 1); i >= 0; i--) {
                    codeLength += seqOf.get(i).encode(os, true);
                }

                codeLength += BerLength.encodeLength(os, codeLength);

                if (withTag) {
                    codeLength += tag.encode(os);
                }

                return codeLength;
            }

            public int decode(InputStream is) throws IOException {
                return decode(is, true);
            }

            public int decode(InputStream is, boolean withTag) throws IOException {
                int codeLength = 0;
                int subCodeLength = 0;
                BerTag berTag = new BerTag();
                if (withTag) {
                    codeLength += tag.decodeAndCheck(is);
                }

                BerLength length = new BerLength();
                codeLength += length.decode(is);
                int totalLength = length.val;

                while (subCodeLength < totalLength) {
                    TransferSyntaxName element = new TransferSyntaxName();
                    subCodeLength += element.decode(is, true);
                    seqOf.add(element);
                }
                if (subCodeLength != totalLength) {
                    throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength
                            + " but has " + subCodeLength);

                }
                codeLength += subCodeLength;

                return codeLength;
            }

            public void encodeAndSave(int encodingSizeGuess) throws IOException {
                BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
                encode(os, false);
                code = os.getArray();
            }

            @Override
            public String toString() {
                StringBuilder sb = new StringBuilder("SEQUENCE OF{");

                if (seqOf == null) {
                    sb.append("null");
                }
                else {
                    Iterator<TransferSyntaxName> it = seqOf.iterator();
                    if (it.hasNext()) {
                        sb.append(it.next());
                        while (it.hasNext()) {
                            sb.append(", ").append(it.next());
                        }
                    }
                }

                sb.append("}");

                return sb.toString();
            }

        }

        public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

        public byte[] code = null;
        private PresentationContextIdentifier presentationContextIdentifier = null;
        private AbstractSyntaxName abstractSyntaxName = null;
        private TransferSyntaxNameList transferSyntaxNameList = null;

        public SEQUENCE() {
        }

        public SEQUENCE(byte[] code) {
            this.code = code;
        }

        public void setPresentationContextIdentifier(PresentationContextIdentifier presentationContextIdentifier) {
            this.presentationContextIdentifier = presentationContextIdentifier;
        }

        public PresentationContextIdentifier getPresentationContextIdentifier() {
            return presentationContextIdentifier;
        }

        public void setAbstractSyntaxName(AbstractSyntaxName abstractSyntaxName) {
            this.abstractSyntaxName = abstractSyntaxName;
        }

        public AbstractSyntaxName getAbstractSyntaxName() {
            return abstractSyntaxName;
        }

        public void setTransferSyntaxNameList(TransferSyntaxNameList transferSyntaxNameList) {
            this.transferSyntaxNameList = transferSyntaxNameList;
        }

        public TransferSyntaxNameList getTransferSyntaxNameList() {
            return transferSyntaxNameList;
        }

        public int encode(BerByteArrayOutputStream os) throws IOException {
            return encode(os, true);
        }

        public int encode(BerByteArrayOutputStream os, boolean withTag) throws IOException {

            if (code != null) {
                for (int i = code.length - 1; i >= 0; i--) {
                    os.write(code[i]);
                }
                if (withTag) {
                    return tag.encode(os) + code.length;
                }
                return code.length;
            }

            int codeLength = 0;
            codeLength += transferSyntaxNameList.encode(os, true);

            codeLength += abstractSyntaxName.encode(os, true);

            codeLength += presentationContextIdentifier.encode(os, true);

            codeLength += BerLength.encodeLength(os, codeLength);

            if (withTag) {
                codeLength += tag.encode(os);
            }

            return codeLength;

        }

        public int decode(InputStream is) throws IOException {
            return decode(is, true);
        }

        public int decode(InputStream is, boolean withTag) throws IOException {
            int codeLength = 0;
            int subCodeLength = 0;
            BerTag berTag = new BerTag();

            if (withTag) {
                codeLength += tag.decodeAndCheck(is);
            }

            BerLength length = new BerLength();
            codeLength += length.decode(is);

            int totalLength = length.val;
            codeLength += totalLength;

            subCodeLength += berTag.decode(is);
            if (berTag.equals(BerInteger.tag)) {
                presentationContextIdentifier = new PresentationContextIdentifier();
                subCodeLength += presentationContextIdentifier.decode(is, false);
                subCodeLength += berTag.decode(is);
            }
            else {
                throw new IOException("Tag does not match the mandatory sequence element tag.");
            }

            if (berTag.equals(BerObjectIdentifier.tag)) {
                abstractSyntaxName = new AbstractSyntaxName();
                subCodeLength += abstractSyntaxName.decode(is, false);
                subCodeLength += berTag.decode(is);
            }
            else {
                throw new IOException("Tag does not match the mandatory sequence element tag.");
            }

            if (berTag.equals(TransferSyntaxNameList.tag)) {
                transferSyntaxNameList = new TransferSyntaxNameList();
                subCodeLength += transferSyntaxNameList.decode(is, false);
                if (subCodeLength == totalLength) {
                    return codeLength;
                }
            }
            throw new IOException("Unexpected end of sequence, length tag: " + totalLength
                    + ", actual sequence length: " + subCodeLength);

        }

        public void encodeAndSave(int encodingSizeGuess) throws IOException {
            BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
            encode(os, false);
            code = os.getArray();
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("SEQUENCE{");
            sb.append("presentationContextIdentifier: ").append(presentationContextIdentifier);

            sb.append(", ");
            sb.append("abstractSyntaxName: ").append(abstractSyntaxName);

            sb.append(", ");
            sb.append("transferSyntaxNameList: ").append(transferSyntaxNameList);

            sb.append("}");
            return sb.toString();
        }

    }

    public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
    public byte[] code = null;
    private List<SEQUENCE> seqOf = null;

    public ContextList() {
        seqOf = new ArrayList<>();
    }

    public ContextList(byte[] code) {
        this.code = code;
    }

    public List<SEQUENCE> getSEQUENCE() {
        if (seqOf == null) {
            seqOf = new ArrayList<>();
        }
        return seqOf;
    }

    public int encode(BerByteArrayOutputStream os) throws IOException {
        return encode(os, true);
    }

    public int encode(BerByteArrayOutputStream os, boolean withTag) throws IOException {

        if (code != null) {
            for (int i = code.length - 1; i >= 0; i--) {
                os.write(code[i]);
            }
            if (withTag) {
                return tag.encode(os) + code.length;
            }
            return code.length;
        }

        int codeLength = 0;
        for (int i = (seqOf.size() - 1); i >= 0; i--) {
            codeLength += seqOf.get(i).encode(os, true);
        }

        codeLength += BerLength.encodeLength(os, codeLength);

        if (withTag) {
            codeLength += tag.encode(os);
        }

        return codeLength;
    }

    public int decode(InputStream is) throws IOException {
        return decode(is, true);
    }

    public int decode(InputStream is, boolean withTag) throws IOException {
        int codeLength = 0;
        int subCodeLength = 0;
        BerTag berTag = new BerTag();
        if (withTag) {
            codeLength += tag.decodeAndCheck(is);
        }

        BerLength length = new BerLength();
        codeLength += length.decode(is);
        int totalLength = length.val;

        while (subCodeLength < totalLength) {
            SEQUENCE element = new SEQUENCE();
            subCodeLength += element.decode(is, true);
            seqOf.add(element);
        }
        if (subCodeLength != totalLength) {
            throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has "
                    + subCodeLength);

        }
        codeLength += subCodeLength;

        return codeLength;
    }

    public void encodeAndSave(int encodingSizeGuess) throws IOException {
        BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
        encode(os, false);
        code = os.getArray();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SEQUENCE OF{");

        if (seqOf == null) {
            sb.append("null");
        }
        else {
            Iterator<SEQUENCE> it = seqOf.iterator();
            if (it.hasNext()) {
                sb.append(it.next());
                while (it.hasNext()) {
                    sb.append(", ").append(it.next());
                }
            }
        }

        sb.append("}");

        return sb.toString();
    }

}
