/**
 * This class file was automatically generated by jASN1 v1.7.2-SNAPSHOT (http://www.openmuc.org)
 */

package org.openmuc.josistack.internal.presentation.asn1;

import java.io.IOException;
import java.io.InputStream;

import org.openmuc.jasn1.ber.BerByteArrayOutputStream;
import org.openmuc.jasn1.ber.BerTag;

public class UserData {

    public byte[] code = null;
    private SimplyEncodedData simplyEncodedData = null;
    private FullyEncodedData fullyEncodedData = null;

    public UserData() {
    }

    public UserData(byte[] code) {
        this.code = code;
    }

    public void setSimplyEncodedData(SimplyEncodedData simplyEncodedData) {
        this.simplyEncodedData = simplyEncodedData;
    }

    public SimplyEncodedData getSimplyEncodedData() {
        return simplyEncodedData;
    }

    public void setFullyEncodedData(FullyEncodedData fullyEncodedData) {
        this.fullyEncodedData = fullyEncodedData;
    }

    public FullyEncodedData getFullyEncodedData() {
        return fullyEncodedData;
    }

    public int encode(BerByteArrayOutputStream os) throws IOException {

        if (code != null) {
            for (int i = code.length - 1; i >= 0; i--) {
                os.write(code[i]);
            }
            return code.length;
        }

        int codeLength = 0;
        if (fullyEncodedData != null) {
            codeLength += fullyEncodedData.encode(os, false);
            // write tag: APPLICATION_CLASS, CONSTRUCTED, 1
            os.write(0x61);
            codeLength += 1;
            return codeLength;
        }

        if (simplyEncodedData != null) {
            codeLength += simplyEncodedData.encode(os, false);
            // write tag: APPLICATION_CLASS, PRIMITIVE, 0
            os.write(0x40);
            codeLength += 1;
            return codeLength;
        }

        throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
    }

    public int decode(InputStream is) throws IOException {
        return decode(is, null);
    }

    public int decode(InputStream is, BerTag berTag) throws IOException {

        int codeLength = 0;
        BerTag passedTag = berTag;

        if (berTag == null) {
            berTag = new BerTag();
            codeLength += berTag.decode(is);
        }

        if (berTag.equals(BerTag.APPLICATION_CLASS, BerTag.PRIMITIVE, 0)) {
            simplyEncodedData = new SimplyEncodedData();
            codeLength += simplyEncodedData.decode(is, false);
            return codeLength;
        }

        if (berTag.equals(BerTag.APPLICATION_CLASS, BerTag.CONSTRUCTED, 1)) {
            fullyEncodedData = new FullyEncodedData();
            codeLength += fullyEncodedData.decode(is, false);
            return codeLength;
        }

        if (passedTag != null) {
            return 0;
        }

        throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
    }

    public void encodeAndSave(int encodingSizeGuess) throws IOException {
        BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
        encode(os);
        code = os.getArray();
    }

    @Override
    public String toString() {
        if (simplyEncodedData != null) {
            return "CHOICE{simplyEncodedData: " + simplyEncodedData + "}";
        }

        if (fullyEncodedData != null) {
            return "CHOICE{fullyEncodedData: " + fullyEncodedData + "}";
        }

        return "unknown";
    }

}
